#!/bin/bash

#Description:
#    purpose: page-based testing, write data to target raw device sequentially, and verify data.
#    procedures: like as onlysw4times.scp, additionally, verify data and because of page-based we use the ttest or 8kttest

#input parameters:
#    1st: target raw device
#    2nd: amount of data to write (in page unit)
#    3th: SSD page unit is 4KB or 8KB

#########################
#     include files     #
#########################

source ../common/config_test_env.sh
source ../common/common_func.sh
source ../common/common_global_var.sh

check_sofa_service
retval=$?
if [ "$retval" == 0 ]
then
    log_msg "$test_scfn: [ERROR] sofa service not running, please start it."
    exit 1
fi

#########################
#   setup testing para  #
#########################

target_dev=lfsm
amount_data=0
to_8k=0

if [ $# -eq 1 ] ; then
    target_dev=$1
    get_disk_size $target_dev
    amount_data=$gDiskSize
elif [ $# -eq 2 ] ; then
    target_dev=$1
    get_disk_size $target_dev
    amount_data=$2
elif [ $# -eq 3 ] ; then
    target_dev=$1
    get_disk_size $target_dev
    amount_data=$2
    to_8k=$3
else
    target_dev=lfsm
    get_disk_size $target_dev
    amount_data=$gDiskSize
fi

#if amount_data >= disksize, amount_data = disksize
if [ $amount_data -ge $gDiskSize ] ; then
    amount_data=$gDiskSize
fi

log_msg "$test_scfn: [INFO] start testing with target dev = $target_dev, and amount data = $amount_data, to_8k = $to_8k"

#########################
#  set other parameters #
#########################

if [ "$to_8k" == 1 ] ; then
   test_tool=${PATH_TEST_TOOL}/8kttest
fi

log_msg "$test_scfn: [INFO] test_tool = $test_tool"

#########################
#   start testing       #
#########################

err_ret=0

[ -f $test_log_file ] && rm -f $test_log_file

for((i=0;i<4;i++))
do
        [ -f $test_log_file ] && rm -f $test_log_file
        [ -f ${PATH_LOG}/${test_scfn}_tmp.log ] && rm -f ${PATH_LOG}/${test_scfn}_tmp.log
        
        seed=$(($i*13))
        export utest_seed48=$((13579+$seed))
        echo "exec $i st times"
        $test_tool /dev/$target_dev sw 0 $amount_data >> $test_log_file
        if [ $? -ne 0 ]; then
            log_msg "$test_scfn: [ERROR] test error, please check it"
            err_ret=1
            break
        fi
        
        $test_tool /dev/$target_dev sr 0 $amount_data > ${PATH_LOG}/${test_scfn}_tmp.log
        if [ $? -ne 0 ]; then
            log_msg "$test_scfn: [ERROR] test error, please check it"
            err_ret=1
            break
        fi

        cor_num=`awk -f "../common/check_correct_num.awk" ${PATH_LOG}/${test_scfn}_tmp.log`
        err=$(($amount_data-$cor_num))
        cat ${PATH_LOG}/${test_scfn}_tmp.log >> $test_log_file
        log_msg "$test_scfn: [INFO]i=$i num_of_error=$err num_of_correct=$cor_num" >> $test_log_file     
        if [ $err -ne 0 ]; then
            log_msg "$test_scfn: [ERROR] test error, please check it"
            err_ret=1
        fi
done

if [ "$err_ret" == 0 ]
then
    log_msg "$test_scfn: [INFO] test result ok"
    #TODO notify the caller or jenkins server that test is ok
else
    exit $err_ret
fi